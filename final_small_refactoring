from sqlalchemy import exists
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import json
import tkinter as tk
import requests
import datetime
import numpy as np
from scipy.optimize import minimize_scalar
from math import factorial

'''
erstellen einer Datenbank
In tabellen Form mit den Spalten
id, Datum, Heim, Gast, ToreHeim, ToreGast,

'''

Base = declarative_base()  # Erstellen der Basis

class Spiele(Base):
    __tablename__ = "spiele"

    id = Column(Integer, primary_key=True, unique=True)
    Datum = Column(String)
    Heim = Column(String)
    Gast = Column(String)
    ToreHeim = Column(Integer)
    ToreGast = Column(Integer)

    def __init__(self, MatchID, Datum, Heim, Gast, ToreHeim, ToreGast):
        self.id = MatchID
        self.Datum = Datum
        self.Heim = Heim
        self.Gast = Gast
        self.ToreHeim = ToreHeim
        self.ToreGast = ToreGast


engine = create_engine('sqlite:///Bundesliga_Ergebnisse_DB.db')
Base.metadata.create_all(engine)  # Erstellen der Datenbbank
Base.metadata.bind = engine  # Binden der Engine
Session = sessionmaker(bind=engine)  # Erstellen der Sitzung
session = Session()
Spiel_zugriff = session.query(Spiele).all()
# Zugriff um einzelene Daten abzufragen

session.commit()  # abschließende Aktualisierung


# Testaufruf einzelner Key eines Spiels
# Teste alle matchid`s Überprüfung auf doppelte ID`s
# Test eines Beispiels
def testeinesSpiels(spiel):
    print(Spiel_zugriff[spiel].id)
    print(Spiel_zugriff[spiel].Heim)
    print(Spiel_zugriff[spiel].ToreHeim)
    print(Spiel_zugriff[spiel].Gast)
    print(Spiel_zugriff[spiel].ToreGast)


#Globale Variablen berechnen
'''
Funktion berechneAktuelleSaison findet das Jahr der aktuellen Saison gemäß openligadb.de
arguments: none
returns: jahr (int)
'''


def berechneAktuelleSaison():
    now = datetime.datetime.now()  # aktuelles Datum
    jahr = now.year
    monat = now.month
    # je nach dem, ob es vor oder nach Juli ist,
    #ist man in verschiedenen Saisons
    if monat >= 7:
        return jahr
    else:
        return jahr-1


# beziehe Daten der Startseite unserer Datenquelle
r = requests.get("https://www.openligadb.de/api/getmatchdata/bl1/")
y = json.loads(r.text)
p = y[0]

'''
Funktion oldMatchIsFinished überprüft ob auf der
Startseite der aktuelle spieltag angezeigt wird
arguments: none
returns: boolean
'''


def oldMatchIsFinished():
    global p
    matchstatus = dict.get(p, "MatchIsFinished")
    if matchstatus:
        return True
    else:
        return False


'''
Funktion berechneAktuellerSpieltag berechnet den heutigen Spieltag
arguments: none
returns: aktueller Spieltag
'''


def berechneAktuellerSpieltag():
    global p
    a = dict.get(p, "Group")
    spieltag = dict.get(a, "GroupOrderID")
    matchstatus = oldMatchIsFinished()
    if matchstatus:
        return spieltag
    else:
        if spieltag - 1 > 0:
            return spieltag - 1
        else:
            global aktuellesJahr
            aktuellesJahr = aktuellesJahr - 1
            return 34


'''
Funktion berechneKommenderSpieltag berechnet den nächsten Spieltag
arguments: none
returns: kommender Spieltag
'''


def berechneKommenderSpieltag():
    if aktuellerSpieltag < 34:
        return aktuellerSpieltag + 1
    else:
        global aktuellesJahr
        aktuellesJahr = aktuellesJahr + 1
        return 1


anzahlSpieleGesamt = session.query(Spiele).count()
aktuellesJahr = berechneAktuelleSaison()
aktuellerSpieltag = berechneAktuellerSpieltag()
kommenderSpieltag = berechneKommenderSpieltag()

#Funktionen für Crawler-Button
'''
Funktion CrawlHelper ruft die Funktion CrawlHelper
und aktualisiert danach das GUI-Fenster
arguments: none
returns: none
'''



def crawlHelper():
    spieltagsjahre()
    gui.Window.destroy()
    gui.Window.update()
    gui.Window.mainloop()

'''
Funktion Spieltagsjahre erstellt für jedes Spieljahr einen Saisonlink
arguments: none
returns: den aktuellensaisonlink für die weiter Berechnung des Crawlers
'''


def spieltagsjahre():
    jahreszahl = 2009
    while jahreszahl < aktuellesJahr:
        saisonlink ="https://www.openligadb.de/api/getmatchdata/bl1/" + str(jahreszahl) + "/"
        spieltage_counter(saisonlink)
        jahreszahl = jahreszahl+ 1


'''
Funktion SpieltageCounter zählt alle Spieltage einer Saison hoch
arguments: Saisonlink
returns: jeweils den einzelnen Datensatzes eines Spieltages
'''


def spieltage_counter(saisonlink):
    spieltagszahl = 1
    while spieltagszahl < 35:
        spieltaglink = saisonlink + str(spieltagszahl)
        linkanfrage = requests.get(spieltaglink)
        spieldaten = json.loads(linkanfrage.text)
        ausgabeEinesSpieltages(spieldaten)
        spieltagszahl = spieltagszahl+ 1
    session.commit()


'''
Funktion AusgabeEinesSpieltages wertet einen Spieltag
aus für alle neun Spiele eines Spieltages
arguments: Datensatz eines Spieltags.
returns: weitergabe eines einzelnen Spieldatensatzes
'''


def ausgabeEinesSpieltages(spieldaten):
    for spiel in spieldaten:
        spielliste_erstellen(spiel)


'''
Funktion Spielliste ruft die einzelnen Elemente auf,
welche für die Datenbank benötigt werden
arguments: Datensatz für ein Spiel
returns: eine Liste in folgender Form und Daten
        spiel(spiel-id, Heim-name, Gast-name, Heim-Tore, Gast- Tore)
        welche in der Datenbank überprüft und gespeichert wird


'''


def spielliste_erstellen(spiel):

    # Datum aufrufen aus der Liste
    datum_l = str(dict.get(spiel, "MatchDateTime"))
    # Aufrufen der Heimmanschaft
    openligadbjsapiteam1 = dict.get(spiel, "Team1")
    teamheim = dict.get(openligadbjsapiteam1, "TeamName")
    heim_l = str(teamheim)

    # Aufrufen der Gastmannschaft
    openligadbjsapiteam2 = dict.get(spiel, "Team2")
    teamgast = dict.get(openligadbjsapiteam2, "TeamName")
    gast_l = str(teamgast)

    # ToreHeimTeam
    spiel_ergebnis = dict.get(spiel, 'MatchResults')
    end_ergebnis = spiel_ergebnis[1]
    toret1 = dict.get(end_ergebnis, 'PointsTeam1')
    toreheim_l = str(toret1)

    # ToreGastTeam
    spiel_ergebnis = dict.get(spiel, 'MatchResults')
    end_ergebnis = spiel_ergebnis[1]
    toret2 = dict.get(end_ergebnis, 'PointsTeam2')
    toregast_l = str(toret2)
    # Match ID entschlüsseln
    matchID_l = (dict.get(spiel, 'MatchID'))

    '''ausgabe check ' alle Spiele in die Ausgabe
    zu Überprüfung, optional einfach ausklammern
     diverse Tests für die Ausgabe
     print(datum_l)
     print(heim_l)
     print(gast_l)
     print(toreheim_l)
     print(toregast_l)
    '''
    print(dict.get(spiel, 'MatchID'))

    # erstellen der Spieldatei welche später in die Datenbank eingefügt wird
    spiel_allgemein = Spiele(MatchID=matchID_l, Datum=datum_l, Heim=heim_l,
                             Gast=gast_l, ToreHeim=toreheim_l, ToreGast=toregast_l)

    # Check ob das aktuell erstellte Spiel bereits in der Datenbank enthalten ist
    ret = session.query(exists().where(Spiele.id == matchID_l)).scalar()
    if ret:
        pass
    else:
        session.add(spiel_allgemein)  # falls nicht hinzufügen des Spiels

    session.commit()  # aktualisieren der Datenbank



#Funktionen für Trainingsbutton
'''
Funktion Schnittstelle berechnet die Indizes um auf
Teildatensatz zugreifen zu können, bei fehlerhafter
Eingabe wird die Liste (-1,-1) ausgegeben
arguments: Saisonjahr v Spieltag w, ab dem die Daten ausgewählt werden sollen
Saisonjahr x Spieltag y, bis zu dem die Daten ausgewählt werden sollen
returns: Liste, die die Indizes untereSchranke und obereSchranke enthält
'''


def schnittstelle(beginnjahr, beginnspieltag, endejahr, endespieltag):
    spieleprospieltag = 9
    spieleletztesspiel = 8
    spieleprosaison = 306
    beginndaten = 2009
    spieltageprosaison = 34

    if beginnjahr < beginndaten or beginnjahr > aktuellesJahr or endejahr < beginndaten or endejahr > aktuellesJahr or \
            beginnspieltag < 1 or endespieltag < 1 or beginnspieltag > spieltageprosaison \
            or endespieltag > spieltageprosaison:
        return -1, -1
    else:
        untereschranke = (beginnjahr - beginndaten) * spieleprosaison + (beginnspieltag - 1) * spieleprospieltag
        obereschranke = \
            (endejahr - beginndaten) * spieleprosaison + (endespieltag - 1) * spieleprospieltag + spieleletztesspiel
        # UntereID= Spiel_zugriff[untereSchranke].id
        # ObereID= Spiel_zugriff[obereSchranke].id
        print(anzahlSpieleGesamt)
        if (anzahlSpieleGesamt - 1) < obereschranke or obereschranke < untereschranke:
            return -1, -1
        return untereschranke, obereschranke


#Funktion für Dropdown-Listen
'''
Funktion crawlTeams holt die Namen der Teams aus der Datenbank
arguments: Jahr (int), Spieltag (int)
returns: Liste der Teamnamen
'''


def crawlTeams(jahr, spieltag):
    # enthält Teams einer Saison
    teamliste = []

    # externe Daten
    spieltaglink = "https://www.openligadb.de/api/getmatchdata/bl1/" + str(jahr) + "/" + str(spieltag)

    # holt externe Daten eines Spieltages
    dateiopenligadb = requests.get(spieltaglink)
    bodyliste = json.loads(dateiopenligadb.text)

    # geht alle Begegnungen des Spieltages durch

    for spiel in bodyliste:
        # Speichere jeweils die Heimmanschaft aus der json Datei
        a = dict.get(spiel, "Team1")
        heimteam = dict.get(a, "TeamName")
        heim = str(heimteam)
        teamliste.append(heim)

        # Speichere jeweils die Gastmannschaft aus der json Datei
        c = dict.get(spiel, "Team2")
        gastteam = dict.get(c, "TeamName")
        gast = str(gastteam)
        teamliste.append(gast)
    return teamliste


#Funktion für Label des kommenden Spieltages
'''
Funktion resultString erzeugt String, der das
wahrscheinlichste Ergebnis und die Wahrscheinlichkeiten
für Heimsieg, Auswärtssieg und Unentschieden enthält
arguments: Team1 (String, Name Heim), Team2 (String, Name Gast), Alg(String, Vorhersagealg.)
returns: String
'''


def resultString(team1, team2, alg):

    liste = list
    if alg == "minimal":
        liste = minvorhersage(team1, team2)
    elif alg == "poisson":
        liste = poissonWahrscheinlichkeit(team1, team2)

    if int(liste[0]) + int(liste[2]) + int(liste[1]) < 10:
        return "keine Daten in der Datenbank"

    if liste[0] > 90 or liste[2] > 90 or liste[1] > 90:
        return "keine Daten in der Datenbank"

    elif liste[0] >= liste[1] and liste[0] >= liste[2]:
        return str(liste[0]) + "% " + "Heimsieg: " + str(liste[0]) + "% - " \
               + str(liste[1]) + "% - " + str(liste[2]) + "% "

    elif liste[2] >= liste[0] and liste[2] >= liste[1]:
        return str(liste[2]) + "% " + "Gastsieg: " + str(liste[0]) + "% - " \
               + str(liste[1]) + "% - " + str(liste[2]) + "% "

    elif liste[1] >= liste[0] and liste[1] >= liste[2]:
        return str(liste[1]) + "% " + "Remis: " + str(liste[0]) + "% - " \
               + str(liste[1]) + "% - " + str(liste[2]) + "% "

    else:
        return "keine Daten in der Datenbank"


#Funktion für Gewinnwahrscheinlichkeits-Button
'''
Funktion Gewinnwahrscheinlichkeit berechnet die Wahrscheinlichkeiten
der Teams für Gewinn Heim, Unentschieden, Gewinn Gast
arguments: Team1 (Heim), Team2 (Gast)
returns: ErgebnisWahrscheinlichkeiten
(dreielementige Liste, die die Gewinnwhkt von Team1, Unentschieden,
Gewinnwhkt von Team2 enthält)
'''


def minvorhersage(team1, team2):
    siegteam1 = 0
    unentschiedenteam1 = 0
    niederlageteam1 = 0
    siegteam2 = 0
    unentschiedenteam2 = 0
    niederlageteam2 = 0

    i = 0
    indexspiel = anzahlSpieleGesamt - 1  # Indexfunktion

    anzahlspiele_minvorhersage = 5
    spieleeinesspieltages = 9
    while i < anzahlspiele_minvorhersage:

        indexsp = (indexspiel - (i * 9))
        j = 0


        while j < spieleeinesspieltages:
            if Spiel_zugriff[indexsp - j].Heim == team1:
                if Spiel_zugriff[indexsp - j].ToreHeim > Spiel_zugriff[indexsp - j].ToreGast:
                    siegteam1 = siegteam1 + 1
                if Spiel_zugriff[indexsp - j].ToreHeim == Spiel_zugriff[indexsp - j].ToreGast:
                    unentschiedenteam1 = unentschiedenteam1 + 1
                if Spiel_zugriff[indexsp - j].ToreHeim < Spiel_zugriff[indexsp - j].ToreGast:
                    niederlageteam1 = niederlageteam1 + 1

            if Spiel_zugriff[indexsp - j].Gast == team1:
                if Spiel_zugriff[indexsp - j].ToreGast > Spiel_zugriff[indexsp - j].ToreHeim:
                    siegteam1 = siegteam1 + 1
                if Spiel_zugriff[indexsp - j].ToreGast == Spiel_zugriff[indexsp - j].ToreHeim:
                    unentschiedenteam1 = unentschiedenteam1 + 1
                if Spiel_zugriff[indexsp - j].ToreGast < Spiel_zugriff[indexsp - j].ToreHeim:
                    niederlageteam1 = niederlageteam1 + 1

            if Spiel_zugriff[indexsp - j].Heim == team2:
                if Spiel_zugriff[indexsp - j].ToreHeim > Spiel_zugriff[indexsp - j].ToreGast:
                    siegteam2 = siegteam2 + 1
                if Spiel_zugriff[indexsp - j].ToreHeim == Spiel_zugriff[indexsp - j].ToreGast:
                    unentschiedenteam2 = unentschiedenteam2 + 1
                if Spiel_zugriff[indexsp - j].ToreHeim < Spiel_zugriff[indexsp - j].ToreGast:
                    niederlageteam2 = niederlageteam2 + 1

            if Spiel_zugriff[indexsp - j].Gast == team2:
                if Spiel_zugriff[indexsp - j].ToreGast > Spiel_zugriff[indexsp - j].ToreHeim:
                    siegteam2 = siegteam2 + 1
                if Spiel_zugriff[indexsp - j].ToreGast == Spiel_zugriff[indexsp - j].ToreHeim:
                    unentschiedenteam2 = unentschiedenteam2 + 1
                if Spiel_zugriff[indexsp - j].ToreGast < Spiel_zugriff[indexsp - j].ToreHeim:
                    niederlageteam2 = niederlageteam2 + 1

            j = j + 1

        i = i + 1

    # test der einzelnen counter
    # print(SiegTeam1)
    # print(UnentschiedenTeam1)
    # print(NiederlageTeam1)
    # print(SiegTeam2)
    # print(UnentschiedenTeam2)
    # print(NiederlageTeam2)

    if (siegteam1 + siegteam2 + unentschiedenteam1 + unentschiedenteam2 + niederlageteam1 + niederlageteam2) == (2 *
        anzahlspiele_minvorhersage):
        siegwahrscheinlichkeit_team1 = ((siegteam1 + niederlageteam2) / 10 * 100)
        unentschiedenwahrscheinlichkeit = (
                (unentschiedenteam1 + unentschiedenteam2) / 10 * 100)
        siegwahrscheinlichkeit_team2 = ((siegteam2 + niederlageteam1) / 10 * 100)
        ergebniswahrscheinlichkeiten = list(
            (siegwahrscheinlichkeit_team1, unentschiedenwahrscheinlichkeit, siegwahrscheinlichkeit_team2))
        return ergebniswahrscheinlichkeiten

    else:
        return list((0, 0, 0))


'''
Funktion crawlTore packt die Tore die zwei Mannschaften gegeneinander geschossen haben in eine Matrix
arguments: Heim (String), Gast (String)
returns: numpy array
'''


def crawlTore (heim, gast):
    heimliste = []
    gastliste = []

    for spiel in Spiel_zugriff:
        if spiel.Heim == heim and spiel.Gast == gast:
            heimliste.append(spiel.ToreHeim)
            gastliste.append(spiel.ToreGast)

    torematrix = np.array([heimliste, gastliste])
    return torematrix


'''
Funktion neg_llh definiert eine log-Likelihood-Funktion
arguments: Variable theta, Matrix y
returns: negative log-Likelihood-Funktion
'''

def neg_llh(theta, torematrix):
    f = np.sum(torematrix * theta - np.exp(theta))
    return -f


'''
Funktion poissonWahrscheinlichkeit berechnet mit Poisson-Regr. die Ergebniswarscheinlichkeiten eines Spiels
arguments: Heim (String), Gast (String)
returns: ErgebnisWahrscheinlichkeiten
(dreielementige Liste, die die Gewinnwhkt von Heim, Unentschieden,
Gewinnwhkt von Gast enthält)
'''

def poissonWahrscheinlichkeit(heim, gast):
    goal_probabilities = np.zeros((10, 10))
    torematrix = crawlTore(heim, gast).T

    #compute theta for the home-team
    theta_home = minimize_scalar(neg_llh, method='Bounded', bounds=(0., 500.), args=(torematrix[:, 0]))
    #convert theta to lambda:
    lambda_home = np.exp(-theta_home.x)

    #compute theta for the away-team
    theta_away = minimize_scalar(neg_llh, method='Bounded', bounds=(0., 500.), args=(torematrix[:, 1]))
    #convert theta to lambda:
    lambda_away = np.exp(-theta_away.x)

    for j in range(10):
        #Probability for home to score j goals against away as a home-team
        prob_home =  np.exp(-lambda_home)* lambda_home**j / factorial (j)
        for k in range(10):
            #Probability for away to score k goals against home as a away-team
            prob_away = np.exp(-lambda_away) * lambda_away**k / factorial(k)
            #fill table with probabilities of all results
            goal_probabilities[j, k] = prob_home * prob_away


    oberedreicksmatrix = np.triu(goal_probabilities, k=1)
    siegwahrscheinlichkeit_team1 = round(100 * np.sum(oberedreicksmatrix), 1)

    unteredreicksmatrix = np.tril(goal_probabilities, k=-1)
    siegwahrscheinlichkeit_team2 = round(100 * np.sum(unteredreicksmatrix), 1)

    unentschiedenwahrscheinlichkeit = round(100 - siegwahrscheinlichkeit_team1 - siegwahrscheinlichkeit_team2, 1)
    ergebniswahrscheinlichkeiten = list(
        (siegwahrscheinlichkeit_team1, unentschiedenwahrscheinlichkeit, siegwahrscheinlichkeit_team2))
    return ergebniswahrscheinlichkeiten



#GUI-Klasse
class GUI:
    def __init__(self):
        self.Window = tk.Tk()
        self.Window.title('Teamprojekt 19: Vorhersagesystem')

        # Buttons:
        # Crawler
        self.crawlerbutton = tk.Button(self.Window, text='\nStarte Crawler\n',
                                       fg='black', bg="grey", width=10,
                                       height=1,
                                       command=crawlHelper)

        # Training
        self.trainingbutton = tk.Button(self.Window,
                                        text='\nStarte \n Poisson-Training\n',
                                        fg='black', bg="grey",
                                        width=15, height=2,
                                        command=self.startePoissonTraining)

        # Berechnung starten
        self.calculateButton = tk.Button(self.Window, text='Berechne Gewinnwahrscheinlichkeit',
                                         fg='black',
                                         command=self.predict)

        # Fenster schließen
        self.closebutton = tk.Button(self.Window, text='Abbrechen',
                                     bg="grey", fg="white", width=25,
                                     command=self.Window.destroy)

        # Auswählleiste
        self.MV = tk.IntVar()
        self.MV.set(1)
        self.checkbutton1 = tk.Checkbutton(self.Window, text='Minimaler Vorhersagealgorithmus', variable=self.MV,
                                           command=self.changeCheckbutton2)
        self.MLA = tk.IntVar()
        self.MLA.set(0)
        self.checkbutton2 = tk.Checkbutton(self.Window, text='Poisson Algorithmus', variable=self.MLA,
                                           command=self.changeCheckbutton1)

        # Dropdown-Listen
        mannschaften = crawlTeams(aktuellesJahr, aktuellerSpieltag)
        self.var1 = tk.StringVar()
        self.var1.set(mannschaften[0])
        self.dropdown1 = tk.OptionMenu(self.Window, self.var1, *mannschaften)

        self.var2 = tk.StringVar()
        self.var2.set(mannschaften[1])
        self.dropdown2 = tk.OptionMenu(self.Window, self.var2, *mannschaften)

        # Entries
        # Entries um Teildatensatz zum Trainieren des Machine-Learning-Algos auswählen zu können
        self.VonSaisonEntry = tk.Entry(self.Window)
        self.VonSaisonEntry.insert(10, "2009")
        self.BisSaisonEntry = tk.Entry(self.Window)
        self.BisSaisonEntry.insert(10, "2015")
        self.VonTagEntry = tk.Entry(self.Window)
        self.VonTagEntry.insert(10, "1")
        self.BisTagEntry = tk.Entry(self.Window)
        self.BisTagEntry.insert(10, "4")

        # Label
        self.ueberschrift = tk.Label(self.Window, text="Bundesliga-Vorhersage \n", font='Helvetica 20 bold')

        self.labelWaehleDatensatz = tk.Label(self.Window, text="Wähle Zeitraum:", font='Helvetica 10 bold')
        self.labelVon = tk.Label(self.Window, text="Von Saison, Spieltag:")
        self.labelBis = tk.Label(self.Window, text="Bis Saison, Spieltag:")
        self.ErrorLabel = tk.Label(self.Window, text="", fg="red")

        self.labelUnentschieden = tk.Label(self.Window, text="Unentschieden:")
        self.labelGewinnHeim = tk.Label(self.Window, text="Gewinn Heim:")
        self.labelVerlustGast = tk.Label(self.Window, text="Gewinn Gast:")

        self.labelUnentschiedenNum = tk.Label(self.Window, text="?")
        self.labelGewinnHeimNum = tk.Label(self.Window, text="?")
        self.labelGewinnGastNum = tk.Label(self.Window, text="?")

        self.labelHeim = tk.Label(self.Window, text="\nHeim:", width=25, font='Helvetica 10 bold')
        self.labelGast = tk.Label(self.Window, text="\nGast:", width=25, font='Helvetica 10 bold')

        self.LabelkommenderSpieltag = tk.Label(self.Window, text="Der kommende Spieltag:", width=25, font='Helvetica 10 bold')
        self.LabelMinimalerAlg = tk.Label(self.Window, text="Minimaler-Alg.:", width=25, font='Helvetica 10 bold')
        self.LabelPoissonAlg = tk.Label(self.Window, text="Poisson-Alg.:", width=25, font='Helvetica 10 bold')

        self.heim1 = None
        self.gast1 = None
        self.erg1 = None
        self.erg1P = None
        self.heim2 = None
        self.gast2 = None
        self.erg2 = None
        self.erg2P = None
        self.heim3 = None
        self.gast3 = None
        self.erg3 = None
        self.erg3P = None
        self.heim4 = None
        self.gast4 = None
        self.erg4 = None
        self.erg4P = None
        self.heim5 = None
        self.gast5 = None
        self.erg5 = None
        self.erg5P = None
        self.heim6 = None
        self.gast6 = None
        self.erg6 = None
        self.erg6P = None
        self.heim7 = None
        self.gast7 = None
        self.erg7 = None
        self.erg7P = None
        self.heim8 = None
        self.gast8 = None
        self.erg8 = None
        self.erg8P = None
        self.heim9 = None
        self.gast9 = None
        self.erg9 = None
        self.erg9P = None

        try:
            self.erstelleKommenderSpieltag()
        except:
            pass



        # Postition in Grid festlegen
        self.crawlerbutton.grid(column=0, row=1, sticky='W')
        self.trainingbutton.grid(column=3, row=4)
        self.checkbutton1.grid(column=0, row=4, sticky='W')
        self.checkbutton2.grid(column=0, row=3, sticky='W')
        self.LabelkommenderSpieltag.grid(column=0, row=50)
        self.LabelMinimalerAlg.grid(column=2, row=50)
        self.LabelPoissonAlg.grid(column=3, row=50)
        self.labelVon.grid(column=1, row=2)
        self.labelBis.grid(column=1, row=3)
        self.labelWaehleDatensatz.grid(column=1, row=1)
        self.ErrorLabel.grid(column=2, row=4)
        self.VonSaisonEntry.grid(column=2, row=2)
        self.BisSaisonEntry.grid(column=2, row=3)
        self.VonTagEntry.grid(column=3, row=2)
        self.BisTagEntry.grid(column=3, row=3)

        self.labelHeim.grid(column=0, row=20)
        self.labelGast.grid(column=1, row=20)
        self.dropdown1.grid(column=0, row=21)
        self.dropdown2.grid(column=1, row=21)
        self.calculateButton.grid(column=2, row=21)
        self.labelGewinnHeim.grid(column=2, row=22)
        self.labelUnentschieden.grid(column=2, row=23)
        self.labelVerlustGast.grid(column=2, row=24)
        self.labelGewinnHeimNum.grid(column=3, row=22)
        self.labelUnentschiedenNum.grid(column=3, row=23)
        self.labelGewinnGastNum.grid(column=3, row=24)

        self.ueberschrift.grid(column=0, row=0, columnspan=3)
        self.closebutton.grid(column=3, row=100)

    '''
    Funktion erstelleKommenderSpieltag weist den Labels
    des kommenden Spieltages Werte zu
    arguments: none
    returns: none
    '''

    def erstelleKommenderSpieltag(self):
        kommendemannschaften = crawlTeams(aktuellesJahr, kommenderSpieltag)
        labelnamesheim = [self.heim1, self.heim2, self.heim3, self.heim4, self.heim5,
                          self.heim6, self.heim7, self.heim8, self.heim9]
        labelnamesgast = [self.gast1, self.gast2, self.gast3, self.gast4, self.gast5,
                          self.gast6, self.gast7, self.gast8, self.gast9]
        labelnamesergebnis = [self.erg1, self.erg2, self.erg3, self.erg4, self.erg5,
                              self.erg6, self.erg7, self.erg8, self.erg9]
        labelnamesergpoiss = [self.erg1P, self.erg2P, self.erg3P, self.erg4P, self.erg5P,
                              self.erg6P, self.erg7P, self.erg8P, self.erg9P]

        spieltag = 50
        # definiere Reihe ab der die Labels angezeigt werden sollen

        for i, (a, b, c, d) in enumerate(zip(labelnamesheim, labelnamesgast, labelnamesergebnis, labelnamesergpoiss)):
            a = tk.Label(self.Window, text=kommendemannschaften[2 * i], width=20).grid(column=0, row=spieltag + i + 1)
            b = tk.Label(self.Window, text=kommendemannschaften[2 * i + 1], width=20).grid(column=1, row=spieltag + i + 1)
            c = tk.Label(self.Window, text=resultString(kommendemannschaften[2 * i], kommendemannschaften[2 * i + 1], "minimal"),
                         width=30).grid(column=2, row=spieltag + i + 1)
            d = tk.Label(self.Window, text=resultString(kommendemannschaften[2 * i], kommendemannschaften[2 * i + 1], "poisson"),
                         width=30).grid(column=3, row=spieltag + i + 1)

    '''
    Funktion changeCheckbutton1 deaktiviert
    Checkbutton1 wenn Checkbutton2 aktiviert wird
    arguments: none
    returns: none
    '''

    def changeCheckbutton1(self):
        if self.MLA.get() == 1:
            self.checkbutton1.config(variable=self.MV.set(0))
        else:
            self.checkbutton1.config(variable=self.MV.set(1))

    '''
    Funktion changeCheckbutton2 deaktiviert
    Checkbutton2 wenn Checkbutton1 aktiviert wird
    arguments: none
    returns: none
    '''

    def changeCheckbutton2(self):
        if self.MV.get() == 1:
            self.checkbutton2.config(variable=self.MLA.set(0))
        else:
            self.checkbutton2.config(variable=self.MLA.set(1))

    '''
    Funktion starteMachineLearningTraining startet
    Machine-Learning-Training mit Daten aus Entries und
    prüft Eingaben auf Korrektheit
    arguments: none
    returns: none
    '''

    def startePoissonTraining(self):
        vonsaison = self.VonSaisonEntry.get()
        bissaison = self.BisSaisonEntry.get()
        vontag = self.VonTagEntry.get()
        bistag = self.BisTagEntry.get()
        if vonsaison.isdigit() and bissaison.isdigit() and vontag.isdigit() and bistag.isdigit():
            #Todo: Binde Funktion ein, die die gewünschten Daten aus der Datenbank holt
            schranken = schnittstelle(
                int(vonsaison), int(vontag), int(bissaison), int(bistag))
            if schranken[0] < 0:
                self.ErrorLabel.config(
                    text="Saison zwischen 2009 und 2018,\n Tag zwischen 1 und 34"
                    )
            else:
                self.ErrorLabel.config(text="")
        else:
            self.ErrorLabel.config(text="Eingaben müssen Zahlen sein")

    '''
    Funktion predict verwendet entweder Minimaler
    Vorhersage-Algo (MV) oder Machine-Learning-Algo (MLA)
    um Gewinnwahrscheinlichkeiten zu berechnen
    arguments: none
    returns: none
    '''

    def predict(self):
        if self.var1.get() == self.var2.get():
            self.labelGewinnHeimNum.config(text="Error: dasselbe Team ausgewählt")
            self.labelUnentschiedenNum.config(text="")
            self.labelGewinnGastNum.config(text="")
        else:
            if self.MV.get() == 1:
                liste = minvorhersage(self.var1.get(), self.var2.get())
                self.labelGewinnHeimNum.config(text=str(liste[0])+"%")
                self.labelUnentschiedenNum.config(text=str(liste[1])+"%")
                self.labelGewinnGastNum.config(text=str(liste[2])+"%")
            else:
                liste = poissonWahrscheinlichkeit(self.var1.get(), self.var2.get())
                self.labelGewinnHeimNum.config(text=str(liste[0])+"%")
                self.labelUnentschiedenNum.config(text=str(liste[1])+"%")
                self.labelGewinnGastNum.config(text=str(liste[2])+"%")
gui = GUI()
gui.Window.mainloop()
